#!/usr/bin/env python3

import pyslha, xslha
import os, sys
import sympy
import configparser
import json
import math
from sympy.parsing.sympy_parser import parse_expr
import time

pwd = os.path.abspath(os.path.dirname(__file__))

def logo():
    logo = '''                                                             
    `7MM"""YMM `7MMF'     A     `7MF'    `7MM"""YMM MMP""MM""YMM 
      MM    `7   `MA     ,MA     ,V        MM    `7 P'   MM   `7 
      MM   d      VM:   ,VVM:   ,V         MM   d        MM      
      MMmmMM       MM.  M' MM.  M'         MM""MM        MM      
      MM   Y  ,    `MM A'  `MM A'          MM   Y        MM      
      MM     ,M     :MM;    :MM;           MM            MM      
    .JMMmmmmMMM      VF      VF          .JMML.        .JMML.    
                                                                 
    Authors: Yusi Pan, Xinglong Jia, Pengxuan Zhu.
    Version: 1.0
    Date:    2019-06-25                                                             
                                                             '''
    print(logo)     

class EWFT_NMSSM():
    def __init__(self, method='', cf='', info={}, eva={}):
        self.cf = configparser.ConfigParser()
        self.method = method
        self.info = info
        self.eva = eva
    
    def check_cf(self, conf_file):
        self.cf.read(conf_file)
        if not self.cf.has_section('Info'):
            sys.exit()
        else:
            if self.cf.has_option('Info', 'input method'):
                self.method = self.cf.get('Info', 'input method')
                if self.cf.has_option('Info', 'input sperctum'):
                    if not os.path.exists(self.cf.get('Info', 'input sperctum')):
                        print("No such File: {}".format(self.cf.get('Info', 'input sperctum')))
                        sys.exit()
                    else:
                        self.info['spectrum'] = self.cf.get('Info', 'input sperctum')
            if not self.cf.has_option('Info', 'FT parse file'):
                print("Error:\tNo option :'FT parse file' found, Please check your config file!!!")
                sys.exit()
            else:
                if not os.path.exists(self.cf.get('Info', 'FT parse file')):
                    print('Error:\tNo file found: {}'.format(self.cf.get('Info', 'FT parse file')))
                else:
                    self.parsefile = self.cf.get('Info', 'FT parse file')
        if not self.cf.has_section('Numerical_Config'):
            print("Error:\tNo Section found :'Numerical_Config', Please check your config file!!!")
            sys.exit()
        else:
            if not (self.cf.has_option('Numerical_Config', 'parameter') and self.cf.has_option('Numerical_Config', 'evaluation') and self.cf.has_option('Numerical_Config', 'screen output') and self.cf.has_option('Numerical_Config', 'file output')):
                print("Error:\ Wrong Info in Section 'Numerical_Config', Please check your config file!!!")
                sys.exit()
            else:
                with open(self.cf.get('Info', 'FT parse file')) as f1:
                    self.eva['expressions'] = json.load(f1)
                
    def read_para(self):
        if self.method == "NMSSMTools":
            if not self.cf.has_section('NMSSMTools_Config'):
                print("Error:\tNo Section 'NMSSMTools_Config', Please check your config file!!!")
                sys.exit()
            else:
                print("Spectrum generated by Package\tNMSSMTools")
                self.read_NMSSMTools()
        elif self.method == "SPheno":
            print("")
        else:
            print("Error: No method {}".format(self.method))
            sys.exit()

    def read_NMSSMTools(self):
        self.info['spe'] = xslha.read(self.info['spectrum'])
        for par in self.cf.options('NMSSMTools_Config'):
            temp = self.cf.get('NMSSMTools_Config', par)
            if len(temp) > 0:
                if temp[0] == '&':
                    if 'Func_HiggsSel_NT' in temp:
                        self.info[par] = self.Func_HiggsSel_NT()
                elif 'SLHA' in temp and 'BLOCK' in temp:
                    temp = temp.split(',')
                    for ii in range(len(temp)):
                        temp[ii] = temp[ii].strip()
                    if len(temp) == 4:
                        self.info[par] = self.info['spe'].Value(temp[2], [int(temp[3])])
        
    def Func_HiggsSel_NT(self):
        spe = xslha.read(self.info['spectrum'])
        mh1 = spe.Value('MASS', [25])
        mh2 = spe.Value('MASS', [35])
        if abs(mh1 - 125.0) < 3. and abs(mh2 - 125.0) >= 3.:
            return mh1
        elif abs(mh1 -125.0) >= 3. and abs(mh2 - 125.0) < 3.:
            return mh2
        else:
            v11 = spe.Value('NMHMIX', [1, 1])
            v12 = spe.Value('NMHMIX', [1, 2])
            v13 = spe.Value('NMHMIX', [1, 3])
            v21 = spe.Value('NMHMIX', [2, 1])
            v22 = spe.Value('NMHMIX', [2, 2])
            v23 = spe.Value('NMHMIX', [2, 3])
            if v12**2 > v11**2 and v12**2 > v13**2:
                return mh1
            elif v22**2 > v21**2 and v22**2 > v23**2:
                return mh2

    def evaluation(self):
        def para_eval(expr):
            for kk in self.info.keys():
                if kk in expr:
                    # print("{}\t{}".format(expr, kk))
                    expr = expr.replace(kk, str(self.info[kk]))
            return eval(expr)

        def get_parameter():
            tem_li = self.cf.get('Numerical_Config', 'parameter').split('\n')
            self.eva['parameter'] = {}
            for line in tem_li:
                line = line.split(',')
                self.eva['parameter'][line[0].strip()] = para_eval(line[1].strip())
            
        def calc(expr):
            for k in self.eva['expressions'].keys():
                if '_{}'.format(k) in expr:
                    if k not in self.eva['fti']:
                        tem_expr = parse_expr(self.eva['expressions'][k])
                        tem_value = tem_expr.subs(self.eva['parameter'])
                        tem_value = tem_value.evalf()
                        self.eva['fti'][k] = tem_value
                        expr = expr.replace('_{}'.format(k), str(tem_value))
                    else:
                        expr = expr.replace('_{}'.format(k), str(self.eva['fti'][k]))
            return eval(expr)

        def get_ft():
            tem_li = self.cf.get('Numerical_Config', 'evaluation').split('\n')
            self.eva['evaluation'] = {}
            for line in tem_li:
                expr = ','.join(line.split(',')[1:]).strip()
                self.eva['ft'].append([line.split(',')[0], calc(expr)])
            
        self.eva['fti'] = {}
        self.eva['ft'] = []
        get_parameter()
        get_ft()

    def output(self):
        output = ''
        with open('source/output.temp', 'r') as f1:
            for it in self.eva['ft']:
                output = "{}{}\t{}\n".format(output, it[0], it[1])
            temp = f1.read()
            temp = temp.replace('>>>mhiggs<<<', '{:>12}'.format("{:.5e}".format(self.info['mhiggs'])))
            temp = temp.replace('>>>>>mz<<<<<', '{:>12}'.format("{:.5e}".format(self.info['mz'])))
            temp = temp.replace('>>>>>g1<<<<<', '{:>12}'.format("{:.5e}".format(self.info['g1'])))
            temp = temp.replace('>>>>>g2<<<<<', '{:>12}'.format("{:.5e}".format(self.info['g2'])))
            temp = temp.replace('>>>mstop1<<<', '{:>12}'.format("{:.5e}".format(self.info['mstop1'])))
            temp = temp.replace('>>>mstop2<<<', '{:>12}'.format("{:.5e}".format(self.info['mstop2'])))
            temp = temp.replace('>>>>mtop<<<<', '{:>12}'.format("{:.5e}".format(self.info['mtop'])))
            temp = temp.replace('>>>>atop<<<<', '{:>12}'.format("{:.5e}".format(self.info['atop'])))
            temp = temp.replace('>>>>mhu2<<<<', '{:>12}'.format("{:.5e}".format(self.info['mhu2'])))
            temp = temp.replace('>>>>mhd2<<<<', '{:>12}'.format("{:.5e}".format(self.info['mhd2'])))
            temp = temp.replace('>>>>mhs2<<<<', '{:>12}'.format("{:.5e}".format(self.info['mhs2'])))
            temp = temp.replace('>>>tanbeta<<', '{:>12}'.format("{:.5e}".format(self.info['tanbeta'])))
            temp = temp.replace('>>>mueff<<<<', '{:>12}'.format("{:.5e}".format(self.info['mueff'])))
            temp = temp.replace('>>>alambda<<', '{:>12}'.format("{:.5e}".format(self.info['alambda'])))
            temp = temp.replace('>>>akappa<<<', '{:>12}'.format("{:.5e}".format(self.info['akappa'])))
            temp = temp.replace('>>>lambda<<<', '{:>12}'.format("{:.5e}".format(self.info['lambda'])))
            temp = temp.replace('>>>>kappa<<<', '{:>12}'.format("{:.5e}".format(self.info['kappa'])))
            output = "{}\n{}\n".format(output, temp)
            for it in self.eva['fti'].keys():
                output = "{}{}\t{}\n".format(output, it, self.eva['fti'][it])
        print(output)
        with open("EWFT_Out.dat", 'w') as f2:
            f2.write(output)
            







if __name__ == '__main__':
    conf_file = "{}/ewft.ini".format(pwd)
    logo()
    spectr = EWFT_NMSSM()
    spectr.check_cf(conf_file)
    spectr.read_para()
    spectr.evaluation()
    spectr.output()
    # print(spectr.info)

